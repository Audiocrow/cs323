#define OFFSET 69

bool parseFullString(string word)
{
	
	string parsingTable[69][48]{
		/* 0*/{ "S2",	""	,	""	,	""		,	"S7"	,	"S11"	,	""		,	"S18"	,	"S19"	,	""		,	""		,	""		,	"S20"	,	"S21"	,	"S22"	,	"S23"	,	"S24"	,	"S25"	,	"S26"	,	"S27"	,	"S28"	,	"S29"	,	"S30"	,	"S31"	,	"S32"	,	"S33"	,	"S16"	,	""		,	""		,	""		,	"1"		,	"6"		,	""		,	""		,	"5"		,	""		,	""	,	"8"		,	"9"		,	"10"	,	"12"	,	"13"	,	"14"	,	"15"	,	"68"	,	"17"	,	"4"		,	"3"},
		/* 1*/{ ""	,	""	,	""	,	"ACC"	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/* 2*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/* 3*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/* 4*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/* 5*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/* 6*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/* 7*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/* 8*/{ ""	,	""	,	""	,	"R12"	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/* 9*/{ ""	,	""	,	""	,	"R14"	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*10*/{ ""	,	""	,	""	,	"R15"	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*11*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*12*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*13*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*14*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*15*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*16*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*17*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*18*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*19*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*20*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*21*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*22*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*23*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*24*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*25*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*26*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*27*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*28*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*29*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*30*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*31*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*32*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*33*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*34*/{ ""	,	"E1",	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*35*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*36*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*37*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*38*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*39*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*40*/{ ""	,	""	,	""	,	"R13"	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*41*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*42*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*43*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*44*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*45*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*46*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*47*/{ ""	,  "S56",	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*48*/{ ""	,	""	,	"E1",	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*49*/{ ""	,	""	,	""	,	"E1"	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*50*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*51*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*52*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*53*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*54*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*55*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*56*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*57*/{ ""	,	""	,	"R8",	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*58*/{ ""	,	""	,	""	,	"E1"	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*59*/{ ""	,	""	,  "S61",	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*60*/{ ""	,	""	,	""	,	"R16"	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*61*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*62*/{ ""	,	""	,	""	,	"S63"	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*63*/{ ""	,	""	,	""	,	"R1"	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*64*/{ ""	,	""	,	""	,	"R17"	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*65*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*66*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*67*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" },
		/*68*/{ ""	,	""	,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""	,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	""		,	"" }
	};
	
	
	unordered_map<string, int> NON_STATES_STRINGS{
		{"program"		,69	},{	"var"		,70	},{	"begin"		,71	},{	"end."		,72	},{"integer",73	},{	"print"		,74	},
		{"<prog>"		,99	},{	"<id>"		,100},{	"<id'>"		,101},{"<dec-list>"	,102},{"<dec>"	,103},{"<type>"		,104},
		{"<stat-list>"	,105},{	"<stat>"	,106},{"<write>"	,107},{"<assign>"	,108},{"<expr>"	,109},{"<term>"		,110},
		{"<factor>"		,111},{	"<number>"	,112},{"<number'>"	,113},{	"<sign>"	,114},{"<digit>",115},{"<letter>"	,116}
	};

	unordered_map<char, int>NON_STATE_CHARS{
		{',',75},{'+',76},{'-',77},{'*',78},{'/',79},{'=',80},{'0',81},{'1',82},
		{'2',83},{'3',84},{'4',85},{'5',86},{'6',87},{'7',88},{'8',89},{'9',90},
		{'p',91},{'q',92},{'r',93},{'s',94},{'(',95},{')',96},{':',97},{';',98}
	};

	unordered_map<int, pair<string, int>> RULES{
		{ 1,{ "<prog>"		,8 } },{ 2,{ "<id>"		,2 } },{ 3,{ "<id>"		,1 } },{ 4,{ "<id'>"		,2 } },
		{ 5,{ "<id'>"		,2 } },{ 6,{ "<id'>"	,1 } },{ 7,{ "<id'>"	,1 } },{ 8,{ "<dec-list>"	,4 } },
		{ 9,{ "<dec>"		,3 } },{10,{ "<dec>"	,1 } },{11,{ "<type>"	,1 } },{12,{ "<stat-list>"	,1 } },
		{13,{ "<stat-list>"	,2 } },{14,{ "<stat>"	,1 } },{15,{ "<stat>"	,1 } },{16,{ "<write>"		,5 } },
		{17,{ "<assign>"	,4 } },{18,{ "<expr>"	,3 } },{19,{ "<expr>"	,3 } },{20,{ "<expr>"		,1 } },
		{21,{ "<term>"		,3 } },{22,{ "<term>"	,3 } },{23,{ "<term>"	,1 } },{24,{ "<factor>"		,1 } },
		{25,{ "<factor>"	,1 } },{26,{ "<factor>"	,3 } },{27,{ "<number>"	,2 } },{28,{ "<number>"		,1 } },
		{29,{ "<number'>"	,2 } },{30,{ "<number'>",1 } },{31,{ "<sign>"	,1 } },{32,{ "<sign>"		,1 } },
		{33,{ "<digit>"		,1 } },{34,{ "<digit>"	,1 } },{35,{ "<digit>"	,1 } },{36,{ "<digit>"		,1 } },
		{37,{ "<digit>"		,1 } },{38,{ "<digit>"	,1 } },{39,{ "<digit>"	,1 } },{40,{ "<digit>"		,1 } },
		{41,{ "<digit>"		,1 } },{42,{ "<digit>"	,1 } },{43,{ "<letter>"	,1 } },{44,{ "<letter>"		,1 } },
		{45,{ "<letter>"	,1 } },{46,{ "<letter>"	,1 } }
	};

	unordered_map<int, string> ERRORS{
		{1, "Expected ';'"},{2, "Expected ','"},{3, "Expected ':'"},{4, "Expected '('"},{5, "Expected ')'"}
	};

	regex REDUCE("^R\\d{1,2}");
	regex SHIFT("^S\\d{1,2}");
	regex ACCEPT("ACC");
	regex ERROR("^E\\d");

	bool ever = true;
	bool program = false;
	bool var = false;
	bool begin = false;
	bool end = false;
	bool charString = false;

	int _row;
	int _col;
	int _tempCol;
	int _pushFinal;
	int _ruleNumber;
	int _rightRule;
	int _popDump;
	int _stringIndex = 0;
	size_t pos;

	char _programWordChar;
	string _leftRule;
	string _programWord;
	string _tableString;
	string _errorString;

	stack<int> traceStack;

	auto pop = [&]() {
		int temp = traceStack.top();
		traceStack.pop();
		return temp;
	};

	auto push = [&](int x) {
		if (x == 68)
			program = true;
		if (x == 69)
			var = true;
		if (x == 70)
			begin = true;
		if (x == 71)
			end = true;
		traceStack.push(x);
	};

	pos = word.find(" ");
	_programWord = word.substr(0, pos);
	word = word.substr(pos + 1);
	traceStack.push(0);

	for (;ever;) {

		_row = pop();
		if (_row > OFFSET - 1)
			break;

		if (NON_STATES_STRINGS.find(_programWord) == NON_STATES_STRINGS.end())
		{
			_programWordChar = _programWord.at(_stringIndex);
			if (NON_STATE_CHARS.find(_programWordChar) == NON_STATE_CHARS.end())
			{
				cout << "unknown identifier" << endl;
				break;
			}
			charString = true;
		}
		if (charString) {
			charString = false;
			ever = parseSubString(traceStack, parsingTable, _programWord, NON_STATES_STRINGS, NON_STATE_CHARS, ERRORS, RULES);
			if (!ever) {
				cout << "unknown identifier" << endl;
				break;
			}
			pos = word.find(" ");
			_programWord = word.substr(0, pos);
			word = word.substr(pos + 1);
		}
		_col = NON_STATES_STRINGS.at(_programWord);

		_tableString = parsingTable[_row][_col - OFFSET];

		if (regex_match(_tableString, REDUCE)) {
			_ruleNumber = stoi(_tableString.substr(1, _tableString.size()));
			_leftRule = RULES.at(_ruleNumber).first;
			_tempCol = NON_STATES_STRINGS.at(_leftRule);
			_rightRule = RULES.at(_ruleNumber).second;
			for (int i = 0; i <(2 * _rightRule) - 1; i++)
				_popDump = pop();
			_row = pop();
			_tableString = parsingTable[_row][_tempCol - OFFSET];
			_pushFinal = stoi(_tableString);
			push(_row);
			push(_tempCol);
			push(_pushFinal);
		}
		else if (regex_match(_tableString, SHIFT)) {
			_tableString = _tableString.substr(1, _tableString.size());
			pos = word.find(" ");
			_programWord = word.substr(0, pos);
			word = word.substr(pos + 1);
			if (NON_STATES_STRINGS.find(_programWord) == NON_STATES_STRINGS.end()) {
				_programWordChar = _programWord.at(_stringIndex);
				if (NON_STATE_CHARS.find(_programWordChar) == NON_STATE_CHARS.end())
				{
					cout << "unknown identifier" << endl;
					break;
				}
			}
			_pushFinal = stoi(_tableString);
			push(_row);
			push(_col);
			push(_pushFinal);
		}
		else if (regex_match(_tableString, ACCEPT) && program && var && begin && end) {
			while (!traceStack.empty())
				_popDump = pop();
			return true;
		}
		else if (regex_match(_tableString, ERROR)) {
			_tableString = _tableString.substr(1, _tableString.size());
			_ruleNumber = stoi(_tableString);
			cout << ERRORS.at(_ruleNumber) << endl;
		}
		else {
			cout << "invalid expression" << endl;
			ever = false;
		}
	}
	while (!traceStack.empty())
		_popDump = pop();
	if (!program) 
		cout << "'program' is expected" << endl;
	if (!var)
		cout << "'var' is expected" << endl;
	if (!begin)
		cout << "'begin' is expected" << endl;
	if (!end)
		cout << "'end.' is expected" << endl;
	return false;
}
template<size_t rows, size_t cols>
bool parseSubString(stack<int>& myStack, string (&parsingTable)[rows][cols], string word,unordered_map<string, int>& myMap, unordered_map<char, int>& myMapChar,unordered_map<int, string> &ERRORS, unordered_map<int, pair<string, int>>& RULES)
{
	regex REDUCE("^R\\d{1,2}");
	regex SHIFT("^S\\d{1,2}");
	regex ERROR("^E\\d");

	bool RUN = true;

	int _stringIndex = 0;
	int _row;
	int _col;
	int _tempCol;
	int _pushFinal;
	int _ruleNumber;
	int _rightRule;
	int _popDump;

	char _wordChar;
	string _leftRule;
	string _tableString;

	stack<int> traceStack;

	auto pop = [&]() {
		int temp = traceStack.top();
		traceStack.pop();
		return temp;
	};

	auto push = [&](int x) {
		traceStack.push(x);
	};

	traceStack.push(0);
	_wordChar = word.at(_stringIndex);

	while (RUN) {

		_row = pop();
		if (_row > OFFSET - 1)
			break;

		if (myMapChar.find(_wordChar) == myMapChar.end())
		{
			break;
		}
		_col = myMapChar.at(_wordChar);

		_tableString = parsingTable[_row][_col - OFFSET];

		if (regex_match(_tableString, REDUCE)) {
			_ruleNumber = stoi(_tableString.substr(1, _tableString.size()));
			_leftRule = RULES.at(_ruleNumber).first;
			_tempCol = myMap.at(_leftRule);
			_rightRule = RULES.at(_ruleNumber).second;
			for (int i = 0; i <(2 * _rightRule) - 1; i++)
				_popDump = pop();
			_row = pop();
			_tableString = parsingTable[_row][_tempCol - OFFSET];
			_pushFinal = stoi(_tableString);
			push(_row);
			push(_tempCol);
			push(_pushFinal);
		}
		else if (regex_match(_tableString, SHIFT)) {
			_tableString = _tableString.substr(1, _tableString.size());
			if (_stringIndex < word.size())
				_wordChar = word.at(++_stringIndex);
			else
				return true;
			if (myMapChar.find(_wordChar) == myMapChar.end()) {
				break;
			}
			_pushFinal = stoi(_tableString);
			push(_row);
			push(_col);
			push(_pushFinal);
		}
		else if (regex_match(_tableString, ERROR)) {
			_tableString = _tableString.substr(1, _tableString.size());
			_ruleNumber = stoi(_tableString);
			cout << ERRORS.at(_ruleNumber) << endl;
		}
		else {
			cout << "invalid expression" << endl;
			RUN = false;
		}
	}
	return false;
}